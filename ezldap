#!/bin/bash

#########################CONFIG############################
CONFIG_FILE=/etc/ezldap/ezldap.conf
if test -f "$CONFIG_FILE"; then
    source /etc/ezldap/ezldap.conf
else
    echo "Config file not found :("
    echo "Try to create a new one using /etc/ezldap/install.sh script"
    exit 1
fi
###########################END#############################


###########################LDAP############################

#LDAP query------------------
function LDAP_SEARCH {
    #Filter options--------------
    if [ -z "$GROUP" ]; then
        filter="(&(objectCategory=Person)(mail=*$EMAIL)(displayName=*${DISNAME})(cn=*${NAME})(sAMAccountName=*$LOGIN))"
        basic_attribute="name displayName sAMAccountName mail physicalDeliveryOfficeName telephoneNumber birthDate"
    else
        filter="(&(objectClass=group)(sAMAccountName=*$GROUP))"
        basic_attribute="member distinguishedName name sAMAccountName managedBy mail mailNickname description"
    fi
    #-----------------------------

    #LDAP user/group query--------
    ldapsearch \
    -LLL \
    -o ldif-wrap=no \
    -H ldaps://$domain \
    -D "$username" \
    -w "$password" \
    -b "$search_base" \
    $filter \
    $basic_attribute \
    $ATTRIBUTE \
    | egrep -v "^# refldaps:" \
    | perl -MMIME::Base64 -Mutf8 -pe 's/^([-a-zA-Z0-9;]+):(:\s+)(\S+)$/$1.$2.&decode_base64($3)/e'
    #-----------------------------
}

function LDAP_MODIFY {
    #LDAP modify------------------
    {
    echo "dn: $group_dn"
    echo "changetype: modify"
    echo "$modify_type: member"
    echo "member: $user_dn"
    } | \
    ldapmodify \
    -H ldaps://$domain \
    -D "$username" \
    -w "$password" \
    | egrep -v "^modifying entry"
    echo "Successfully $modify_type!"
    exit 1
    #-----------------------------
}
#----------------------------

#Modify values---------------
function MODIFY {
    read -p "'add' or 'delete' user from group: " modify_type
    read -p "Copy 'DN' group attribute and paste here: " group_dn
    read -p "Copy 'DN' user attribute and paste here: " user_dn
    echo ""
    echo ""
    LDAP_MODIFY
}
#----------------------------
###########################END#############################


###########################CORE############################
#Change Config------------------
function CONFIG {
    echo "Opening your config file.."
    sleep 1
    sudo "${EDITOR:-nano}" /etc/ezldap/ezldap.conf
    source /etc/ezldap/ezldap.conf
    echo ""
    echo "File saved and sourced !"
    echo ""
    exit 1
}
#-------------------------------

#Help options-------------------
function HELP {
    #Get file name----------------
    _self="${0##*/}"
    #-----------------------------

    #Get user name----------------
    if ! [ $(id -u) = 0 ]; then
        current_user=$USER
    else
        current_user=$SUDO_USER
    fi
    #-----------------------------

    echo "Options:"
    echo ""
    echo "-h           show help"
    echo "-d  <name>   search user by 'displayName'"
    echo "-n  <name>   search user by 'CN'"
    echo "-e  <mail>   search user by 'mail'"
    echo "-l  <login>  search user by 'sAMAccountName'"
    echo "-g  <group>  search group by 'sAMAccountName'"
    echo "-a  <attr>   add additional attribute's"
    echo "-m           add/delete user from group"
    echo "-c           edit config file"
    echo ""
    echo "Usage:"
    echo ""
    echo "To find user"
    echo "$_self -d 'Surname Firstname' -a 'attribute_1 attribute_2'"
    echo "$_self -n 'Surname Firstname' -a 'attribute_1 attribute_2'"
    echo "$_self -e 'username@domain.com' -a 'attribute_1 attribute_2'"
    echo "$_self -l '$current_user' -a 'attribute_1 attribute_2'"
    echo ""
    echo "To find group"
    echo "$_self -g 'any_group' -a 'attribute_1 attribute_2'"
    echo ""
    echo "To add/delete user from group"
    echo "$_self -m"
    echo ""
    exit 1
}
#----------------------------

#Flag options----------------
function CHECK_ARG()
{
    if [[ $2 == -* ]]; then 
        echo "Option $1 requires an argument" >&2
        exit 1
    fi
}

function PARSE_PARAM()
{
    if [ -z "$1" ]; then
        echo "Empty list of options" >&2
        echo
        HELP
    fi

    while getopts ":d:n:e:l:g:a:mhc" opt; do
        case $opt in
            d)
                CHECK_ARG "-d" "$OPTARG"
                ARG_LIST_D=(${OPTARG})
                until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                    ARG_LIST_D+=($(eval "echo \${$OPTIND}"))
                    OPTIND=$((OPTIND + 1))
                done
                DISNAME=$(echo ${ARG_LIST_D[@]} | tr ' ' "*")
            ;;
            n)
                CHECK_ARG "-n" "$OPTARG"
                ARG_LIST_N=(${OPTARG})
                until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                    ARG_LIST_N+=($(eval "echo \${$OPTIND}"))
                    OPTIND=$((OPTIND + 1))
                done
                NAME=$(echo ${ARG_LIST_N[@]} | tr ' ' "*")
            ;;
            e)
                CHECK_ARG "-e" "$OPTARG"
                EMAIL=${OPTARG}
            ;;
            l)
                CHECK_ARG "-l" "$OPTARG"
                LOGIN=${OPTARG}
            ;;
            g)
                CHECK_ARG "-g" "$OPTARG"
                GROUP=${OPTARG}
            ;;
            a)
                CHECK_ARG "-a" "$OPTARG"
                ARG_LIST_A=(${OPTARG})
                until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                    ARG_LIST_A+=($(eval "echo \${$OPTIND}"))
                    OPTIND=$((OPTIND + 1))
                done
                ATTRIBUTE=${ARG_LIST_A[@]}
            ;;
            m)
                MODIFY
            ;;
            h)
                HELP
            ;;
            c)
                CONFIG
            ;;
            \?)
                echo "illegal option: -$OPTARG" >&2
                echo "Check available options using: -h"
                exit 1
            ;;
            :)
                echo "Option -$OPTARG requires an argument!" >&2
                echo "Check available options using: -h"
                exit 1
            ;;
        esac
    done
}


PARSE_PARAM $@
#----------------------------
###########################END#############################


###########################MAIN############################
LDAP_SEARCH
###########################END#############################
